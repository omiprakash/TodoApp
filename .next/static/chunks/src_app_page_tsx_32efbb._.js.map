{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/omprakashtiwari/WorkSpace/TodoApp/src/app/page.tsx"],"sourcesContent":["'use client'\nimport Image from \"next/image\";\nimport { useState, useEffect } from \"react\";\n\ninterface Task {\n  id: number;\n  text: string;\n  completed: boolean;\n}\n\nconst Todo = () => {\n\n  const [task, setTask] = useState<Task[]>([]);\n  const [filter, setFilter] = useState('All')\n  const [newTask, setNewTask] = useState('')\n\n  useEffect(() => {\n      const storedTask = localStorage.getItem('tasks') !== null ? JSON.parse(localStorage.getItem('tasks')!) : [];\n      setTask(storedTask)\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(task))\n  }, [task])\n\n\n  const filteredTask = task.filter(task => {\n    if(filter === 'Completed') return task.completed;\n    if(filter === 'Pending') return !task.completed;\n    return true\n  }) \n\n  const addTask = () => {\n    if(newTask.trim()) {\n      const updatedTask = [...task, {id: Date.now(), text: newTask, completed: false}]\n      setTask(updatedTask)\n      setNewTask('')\n    }\n  }\n\n  const toggleTask = (id: number) => {\n    const updatedTask = task.map(task => task.id === id ? { ...task, completed: !task.completed} : task)\n    setTask(updatedTask)\n  }\n\n  const onDeleteTask = (id: number) => {\n    const updatedTask = task.filter(task => task.id !== id )\n    setTask(updatedTask)\n  }\n\n  const removeTasks = () => {\n    setTask([])\n    localStorage.removeItem('tasks')\n  }\n\n\n  return (\n    <div className=\"p-6 max-w-[800px] mx-auto bg-white rounded-xl shadow-md space-y-4\">\n      <div className=\"flex space-x-2\">\n        <input className=\"border p-2 flex-grow rounded-lg text-black\" placeholder=\"Add something.....\" value={newTask} onChange={(e) => setNewTask(e.target.value)}></input>\n        <button className={`bg-blue-500 px-4 py-2 rounded-lg text-white ${newTask === '' && 'disabled: bg-gray-400 cursor-not-allowed'}` } onClick={() => addTask()}>Add</button>\n        {task.length > 0 && <button className={`bg-red-600 px-4 py-2 rounded-lg text-white` } onClick={() => removeTasks()}>Clear</button>}\n      </div>\n\n      <div className=\"bg-white border-black space-x-2 flex\">\n        {\n          ['All', 'Completed', 'Pending'].map((status) => {\n            return (\n              <button key={status} className={`px-4 py-2 rounded ${filter === status ? 'bg-black text-white' : 'text-black bg-white border'}`} onClick={() => setFilter(status)}>{status}</button>\n            )\n          })\n        }\n\n      </div>\n      \n      { task.length === 0 ? <Image width={20} height={30} src=\"/loader.svg\" alt=\"SVG Logo\" className=\"w-16 h-16\" /> : \n      <div className=\"relative  border border-grey rounded pb-4\">\n      <ul>\n        {filteredTask.map((task) => {\n          return(\n            <li key={task.id} className=\"flex items-center justify-between p-2 border rounded m-4\">\n              <div className=\"flex items-center space-x-2\">\n                <input type=\"checkbox\" checked={task.completed} onChange={() => {toggleTask(task.id)}}></input>\n                <span className={`${task.completed ? 'line-through text-black' : 'text-black'}`}>{task.text}</span>\n              </div>\n              <button className=\"text-red-500\" onClick={() => {onDeleteTask(task.id)}}>Delete</button>\n            </li>\n          )\n        })\n\n        }\n      </ul>\n      <div className=\" absolute -bottom-3 right-2 rounded  bg-white px-2 text-gray-600 mt-4\">{task.filter(task => task.completed).length} of {task.length} completed</div>\n      </div>}\n\n\n    </div>\n\n  )\n\n}\n\nexport default Todo"],"names":[],"mappings":"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"}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}